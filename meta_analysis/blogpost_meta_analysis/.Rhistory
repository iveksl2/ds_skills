box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
),
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "DataRobot Hospital Profiler"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Hospital Profiler"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
install.pcakges(readr)
install.packages(readr)
install.packages('readr')
hosp_df = readr::read_csv('~/dev/usa_hospital_data/gregs_workflow_and_code/source_data/2020-10-05 hospitals_unified_prioritized_time.csv')
glimplse(hosp_df)
install.packages('tidy')
install.packages('tidyr')
install.packages('dplyr')
glimpse(hosp_df)
dplyr::glimpse((hosp_df))
hosp_df %>% columns
library(magrittr)
hosp_df %>% columns
columns(hosp_df)
cols(hosp_df)
hosp_df %>% names
hosp_df %>%
dplyr::group_by('collection_date') %>%
dplyr::summarise(mean(is.na(total_beds)))
hosp_df$collection_date %>% head
hosp_df$collection_date %>% head %>% ymd
hosp_df$collection_date %>% head %>% lubridate;;ymd
hosp_df$collection_date %>% head %>% lubridate::ymd
hosp_df$collection_date %>% head %>% lubridate::ymd(.)
library(lubridate)
install.package(lubridate)
install.package('lubridate')
library(lubridate)
install.packages('lubridate')
hosp_df$collection_date %>% head %>% lubridate::ymd(.)
hostp-df <- hosp_df %>%
dplyr::mutate(collection_date = lubridate::ymd(collection_date))
hosp_df <- hosp_df %>%
dplyr::mutate(collection_date = lubridate::ymd(collection_date))
hosp_df %>%
dplyr::group_by('collection_date') %>%
dplyr::summarise(mean(is.na(total_beds)))
hosp_df %>% head
hosp_df <- readr::read_csv('~/dev/usa_hospital_data/gregs_workflow_and_code/source_data/2020-10-05 hospitals_unified_prioritized_time.csv') %>% as.data.frame()
hosp_df %>% head
hosp_df <- hosp_df %>%
dplyr::mutate(collection_date = lubridate::ymd(collection_date))
hosp_df %>%
dplyr::group_by('collection_date') %>%
dplyr::summarise(mean(is.na(total_beds)))
hosp_df %>%
dplyr::group_by(collection_date) %>%
dplyr::summarise(mean(is.na(total_beds)))
hosp_df %>%
dplyr::group_by(collection_date) %>%
dplyr::summarise(percent_missing = mean(is.na(total_beds)))
library(dplyr)
library(ggplot2)
library(lubridate)
library(magrittr)
library(readr)
library(tidyr)
hosp_df <- readr::read_csv('~/dev/usa_hospital_data/gregs_workflow_and_code/source_data/2020-10-05 hospitals_unified_prioritized_time.csv') %>% as.data.frame()
hosp_df <- hosp_df %>%
dplyr::mutate(collection_date = lubridate::ymd(collection_date))
# Create missing reports on a national and state level
hosp_df %>%
dplyr::group_by(collection_date) %>%
dplyr::summarise(percent_missing = mean(is.na(total_beds)))
library(ggplot2)
install.packages('ggplot2')
hosp_df %>%
dplyr::group_by(collection_date) %>%
dplyr::summarise(percent_missing = mean(is.na(total_beds))) %>%
head
hosp_df %>%
dplyr::group_by(collection_date) %>%
dplyr::summarise(percent_missing = mean(is.na(total_beds))) %>%
ggplot(aes(collection_date, percent_missing)) + geom_line()
library(ggplot2)
hosp_df %>%
dplyr::group_by(collection_date) %>%
dplyr::summarise(percent_missing = mean(is.na(total_beds))) %>%
ggplot(aes(collection_date, percent_missing)) + geom_line()
# Create missing reports on a national and state level
national_total_beds_missing <- hosp_df %>%
dplyr::group_by(collection_date) %>%
dplyr::summarise(percent_missing = mean(is.na(total_beds)))
ggplot(national_total_beds_missing, aes(collection_date, percent_missing)) +
geom_line()
Shiny from
Get Started Gallery Articles Reference Deploy Help Contribute
Create a select list input control
selectInput(
inputId,
label,
choices,
selected = NULL,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL
)
selectizeInput(inputId, ..., options = NULL, width = NULL)
Arguments
inputId
The input slot that will be used to access the value.
label
Display label for the control, or NULL for no label.
choices
List of values to select from. If elements of the list are named, then that name --- rather than the value --- is displayed to the user. It's also possible to group related inputs by providing a named list whose elements are (either named or unnamed) lists, vectors, or factors. In this case, the outermost names will be used as the group labels (leveraging the <optgroup> HTML tag) for the elements in the respective sublist. See the example section for a small demo of this feature.
selected
The initially selected value (or multiple values if multiple = TRUE). If not specified then defaults to the first value for single-select lists and no values for multiple select lists.
multiple
Is selection of multiple items allowed?
selectize
Whether to use selectize.js or not.
width
The width of the input, e.g. '400px', or '100%'; see validateCssUnit().
size
Number of items to show in the selection box; a larger number will result in a taller box. Not compatible with selectize=TRUE. Normally, when multiple=FALSE, a select input will be a drop-down list, but when size is set, it will be a box instead.
...
Arguments passed to selectInput().
options
A list of options. See the documentation of selectize.js for possible options (character option values inside base::I() will be treated as literal JavaScript code; see renderDataTable() for details).
Description
Create a select list that can be used to choose a single or multiple items from a list of values.
Value
A select list control that can be added to a UI definition.
Details
By default, selectInput() and selectizeInput() use the JavaScript library selectize.js (https://github.com/selectize/selectize.js) instead of the basic select input element. To use the standard HTML select input element, use selectInput() with selectize=FALSE.
In selectize mode, if the first element in choices has a value of "", its name will be treated as a placeholder prompt. For example: selectInput("letter", "Letter", c("Choose one" = "", LETTERS))
Note
The selectize input created from selectizeInput() allows deletion of the selected option even in a single select input, which will return an empty string as its value. This is the default behavior of selectize.js. However, the selectize input created from selectInput(..., selectize = TRUE) will ignore the empty string value when it is a single choice input and the empty string is not in the choices argument. This is to keep compatibility with selectInput(..., selectize = FALSE).
Server value
A vector of character strings, usually of length 1, with the value of the selected items. When multiple=TRUE and nothing is selected, this value will be NULL.
See also
updateSelectInput() varSelectInput()
Other input elements: actionButton(), checkboxGroupInput(), checkboxInput(), dateInput(), dateRangeInput(), fileInput(), numericInput(), passwordInput(), radioButtons(), sliderInput(), submitButton(), textAreaInput(), textInput(), varSelectInput()
Examples
## Only run examples in interactive R sessions
if (interactive()) {
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing group support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
# plotting
national_prop_missing %>%
pivot_longer(!collection_date, names_to = "metric", values_to = "prop_missing") %>%
ggplot(aes(collection_date, prop_missing)) +
geom_line() + ylab('% Missing') +
facet_wrap(~metric)
source('~/Desktop/script_for_dashboard.R')
library(DT)
metrics <- c('inpatient_beds',
'inpatient_beds_used',
'inpatient_beds_used_covid',
'total_staffed_adult_icu_beds',
'staffed_adult_icu_bed_occupancy',
'staffed_icu_adult_patients_confirmed_and_suspected_covid',
'total_ventilators',
'ventilators_used',
'inpatient_ventilators_used_covid')
library(DT)
install.packages('DT')
library(shiny); runApp('Desktop/Example_Dashboard.R')
hosp_df
hosp_df %>% glimpse
runApp('Desktop/Example_Dashboard.R')
runApp('Desktop/Example_Dashboard.R')
source('~/.active-rstudio-document')
install.packages('lpSolve')
source('~/.active-rstudio-document')
library(lpSolve) #Loading lpSolve library
obj.fun=c(5000,-2000) #Loading the objective function in obj.fun
constr=matrix(c(1,1,1,0,0,1),ncol = 2, byrow = TRUE) #Loading the constraints
constr.dir=c("=",">=",">=")
constr.rhs=c(200,80,100)
mod=lp("max",obj.fun,constr,constr.dir,constr.rhs,compute.sens = TRUE) #Using lp() to solve our problem
mod$solution #Displaying the values of x and y
x=100
y=100
z = (5000*x)-(2000*y) #Puting the values of x and y in the objective function
options("scipen"=100, "digits"=4)
cat("Net profit =", z) #Displaying the maximum profit
install.packages(c( “ meta ”, “ metasens ” ))
install.packages(c( “ meta ”, “ metasens ” ))
install.packages(c('meta','metasens'))
library(meta)
library(metasens)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
# Change this line to true to instead include all code
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
library(gender)
library(cleanNLP)
library(glmnet)
library(ggpubr)
library(grid)
library(gridExtra)
library(wesanderson)
library(gender)
install.packages('gender')
install.packages('cleanNLP')
install.packages('ggpubr')
install.packages('grid')
install.packages("grid")
install.packages("gridExtra")
install.packages("wesanderson")
# Read in the comments
dat_in <- read_csv("https://raw.githubusercontent.com/domrussel/wsj_comment_analysis/main/cleaned_wsj_comments_1214_noon.csv")
# Read in the comments
dat_in <- readr::read_csv("https://raw.githubusercontent.com/domrussel/wsj_comment_analysis/main/cleaned_wsj_comments_1214_noon.csv")
dat_in
# Proxy for gender using SSA recrods for individuals born from 1932 - 2002
dat_in2 <- dat_in %>%
mutate(first_name = tolower(str_extract(name, "([^\\s]+)"))) %>%
mutate(
birth_year_min = "1932",
birth_year_max = "2002")
library(magrittr)
library(readr)
# Proxy for gender using SSA recrods for individuals born from 1932 - 2002
dat_in2 <- dat_in %>%
mutate(first_name = tolower(str_extract(name, "([^\\s]+)"))) %>%
mutate(
birth_year_min = "1932",
birth_year_max = "2002")
library(tidyverse)
library(gender)
library(cleanNLP)
library(glmnet)
library(ggpubr)
library(grid)
library(gridExtra)
library(wesanderson)
# Proxy for gender using SSA recrods for individuals born from 1932 - 2002
dat_in2 <- dat_in %>%
mutate(first_name = tolower(str_extract(name, "([^\\s]+)"))) %>%
mutate(
birth_year_min = "1932",
birth_year_max = "2002")
dat_in2
View(dat_in2)
View(dat_in2)
gender_df
?gender_df
dat_final <- dat_in2 %>%
left_join(name_gender_probs, by=c("first_name"="name")) %>%
select(name, first_name, prob_name_female=proportion_female, comment)
name_gender_probs <- gender_df(
dat_in2,
name_col = "first_name",
year_col = c("birth_year_min", "birth_year_max"),
method="ssa") %>%
distinct(name, proportion_female)
install.packages("genderdata", repos = "https://dev.ropensci.org", type = "source")
name_gender_probs <- gender_df(
dat_in2,
name_col = "first_name",
year_col = c("birth_year_min", "birth_year_max"),
method="ssa") %>%
distinct(name, proportion_female)
install.packages("genderdata", repos = "https://dev.ropensci.org", type = "source")
install.packages("genderdata", repos = "http://packages.ropensci.org")
name_gender_probs <- gender_df(
dat_in2,
name_col = "first_name",
year_col = c("birth_year_min", "birth_year_max"),
method="ssa") %>%
distinct(name, proportion_female)
install.packages("genderdata", repos = "http://packages.ropensci.org")
gender_df(
dat_in2,
name_col = "first_name",
year_col = c("birth_year_min", "birth_year_max"),
method="ssa") %>%
distinct(name, proportion_female)
source('~/.active-rstudio-document', echo=TRUE)
history()
source('~/Desktop/blogpost_meta_analysis/meta_analysis.R', echo=TRUE)
pubmed_data
search_topic <- 'copd' # Chronic Obstructive Pulmonary Disease
search_query <- EUtilsSummary(search_topic, retmax=100, mindate=2012, maxdate=2012)
summary(search_query)
QueryId(search_query)
records<- EUtilsGet(search_query)
class(records)
library(RISmed)
search_topic <- 'copd' # Chronic Obstructive Pulmonary Disease
search_query <- EUtilsSummary(search_topic, retmax=100, mindate=2012, maxdate=2012)
summary(search_query)
QueryId(search_query)
records<- EUtilsGet(search_query)
records
class(records)
# store it
pubmed_data <- data.frame('Title'=ArticleTitle(records),'Abstract'=AbstractText(records))
head(pubmed_data,1)
pubmed_data$Abstract <- as.character(pubmed_data$Abstract)
pubmed_data$Abstract <- gsub(",", " ", pubmed_data$Abstract, fixed = TRUE)
# see what we have
str(pubmed_data)
pubmed_data %>% head
rquery.wordcloud(pubmed_data$Title)
rquery.wordcloud(pubmed_data$Abstract)
